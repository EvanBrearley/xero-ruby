=begin
#Xero OAuth 2 Identity Service API

#These endpoints are related to managing authentication tokens and identity for Xero API

Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

module XeroRuby
  class IdentityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.new)
      @api_client = api_client
    end
    # Deletes a connection for this user (i.e. disconnect a tenant)
    # Override the base server url that include version
    # @param id [String] Unique identifier for retrieving single object
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_connection(id, opts = {})
      delete_connection_with_http_info(id, opts)
      nil
    end

    # Deletes a connection for this user (i.e. disconnect a tenant)
    # Override the base server url that include version
    # @param id [String] Unique identifier for retrieving single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connection_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.delete_connection ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IdentityApi.delete_connection"
      end
      # resource path
      local_var_path = '/Connections/{id}'.sub('{' + 'id' + '}', id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, "IdentityApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#delete_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # The request body will need to contain the grant type (authorization_code), code and redirect_uri
    # Exchange auth_code for a token_set
    # @param grant_type [String] The OAuth2.0 grant_type
    # @param code [String] The temporary exchange code
    # @param redirect_uri [String] The OAuth2.0 redirect_uri
    # @param [Hash] opts the optional parameters
    # @return [Array<Connection>]
    def exchange_code(grant_type, code, redirect_uri, opts = {})
      data, _status_code, _headers = exchange_code_with_http_info(grant_type, code, redirect_uri, opts)
      data
    end

    # The request body will need to contain the grant type (authorization_code), code and redirect_uri
    # Exchange auth_code for a token_set
    # @param grant_type [String] The OAuth2.0 grant_type
    # @param code [String] The temporary exchange code
    # @param redirect_uri [String] The OAuth2.0 redirect_uri
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Connection>, Integer, Hash)>] Array<Connection> data, response status code and response headers
    def exchange_code_with_http_info(grant_type, code, redirect_uri, opts = {})
      binding.pry
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.exchange_code ...'
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling IdentityApi.exchange_code"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling IdentityApi.exchange_code"
      end
      # verify the required parameter 'redirect_uri' is set
      if @api_client.config.client_side_validation && redirect_uri.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_uri' when calling IdentityApi.exchange_code"
      end
      # resource path
      local_var_path = '/connect/token'.sub('{' + 'grant_type' + '}', grant_type.to_s).sub('{' + 'code' + '}', code.to_s).sub('{' + 'redirect_uri' + '}', redirect_uri.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Connection>' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']
      binding.pry

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "IdentityApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#exchange_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves the connections for this user
    # Override the base server url that include version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_event_id Filter by authEventId
    # @return [Array<Connection>]
    def get_connections(opts = {})
      data, _status_code, _headers = get_connections_with_http_info(opts)
      data
    end

    # Retrieves the connections for this user
    # Override the base server url that include version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :auth_event_id Filter by authEventId
    # @return [Array<(Array<Connection>, Integer, Hash)>] Array<Connection> data, response status code and response headers
    def get_connections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IdentityApi.get_connections ...'
      end
      # resource path
      local_var_path = '/Connections'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authEventId'] = opts[:'auth_event_id'] if !opts[:'auth_event_id'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Connection>' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "IdentityApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IdentityApi#get_connections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
